// routes/generate.js
import express from 'express';
import OpenAI from 'openai';
import dotenv from 'dotenv';

dotenv.config();

const router = express.Router();

// OpenAI Configuration
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY, // Ensure OPENAI_API_KEY is defined in your .env file
  // If you are using a specific API version, specify it here
  // apiVersion: '2023-03-15', // For example
});

// AI Content Generation Route
router.post('/generate-ai-content', async (req, res) => {
  console.log('AI Content Generation Request Received.');

  try {
    const prompt = "Generate a blog post title and content about technology advancements in 2024.";
    console.log('Prompt used:', prompt);

    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini", // Specify the chat model you want to use
      messages: [
        { role: "system", content: "You are a helpful assistant." },
        { role: "user", content: prompt },
      ],
      max_tokens: 500,
      temperature: 0.7,
    });

    console.log('Received response from OpenAI API:', response);

    if (!response || !response.choices || response.choices.length === 0) {
      console.error('OpenAI API response is not as expected:', response);
      return res.status(500).json({ message: 'OpenAI API response is not as expected.' });
    }

    const aiMessage = response.choices[0].message;
    if (!aiMessage || !aiMessage.content) {
      console.error('Expected content not found in AI response:', aiMessage);
      return res.status(500).json({ message: 'Expected content not found in AI response.' });
    }

    const aiText = aiMessage.content.trim();
    console.log('Text generated by AI:', aiText);

    // Split the text into title and content (Simple example)
    const lines = aiText.split('\n').filter(line => line.trim() !== '');
    if (lines.length < 2) {
      console.error('AI generated text is not in the expected format:', aiText);
      return res.status(500).json({ message: 'AI generated text is not in the expected format.' });
    }

    const title = lines[0];
    const content = lines.slice(1).join('\n');
    console.log('Title:', title);
    console.log('Content:', content);

    res.json({ title, content });
  } catch (error) {
    console.error('Error generating AI content:', error);

    // Return more detailed error information
    if (error.response) {
      // Error from OpenAI API
      console.error('OpenAI API error:', error.response.data);
      res.status(error.response.status).json({
        message: error.response.data.message || 'OpenAI API error.',
        code: error.response.data.code || 'unknown_error',
        type: error.response.data.type || 'unknown',
      });
    } else if (error.request) {
      // Request was made but no response received
      console.error('Request made to OpenAI API but no response received:', error.request);
      res.status(500).json({ message: 'Request made to OpenAI API but no response received.' });
    } else {
      // Other errors
      console.error('Other error:', error.message);
      res.status(500).json({ message: 'An error occurred while generating content with AI.' });
    }
  }
});

export default router;
